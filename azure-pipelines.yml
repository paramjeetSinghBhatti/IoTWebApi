# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  - repo: self

variables:
    tag: '$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build image
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: Docker@2
        displayName: Build Web API Docker Image
        inputs:
          containerRegistry: 'PSBhatti Docker'
          repository: 'psbhatti/iotwebapi'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(tag)
          addBaseImageData: false

  - stage: Provision
    displayName: 'terraforming on Azure'
    dependsOn: Build
    jobs:
      - job: ProvisionJob
        displayName: 'Provisioning Azure resources'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          - group: IoTVariables
        steps:
          - script: |
              set -e
  
              terraform init -input=false
              terraform apply -input=false -auto-approve
              terraform output -json > tf_outputs.json
              IOT_CONTAINER_NAME=$(jq -r '.iot_webapi_container.value' tf_outputs.json)
              REMOTE_DOCKER_HOST=$(jq -r '.iot_webapi_dns_name.value' tf_outputs.json)
              echo "Extracted container name value: $IOT_CONTAINER_NAME"
              echo "Extracted container name value: $REMOTE_DOCKER_HOST"
              echo "##vso[task.setvariable variable=VAR_REMOTE_DOCKER_HOST;isOutput=true]$REMOTE_DOCKER_HOST"
              echo "##vso[task.setvariable variable=VAR_IOT_CONTAINER_NAME;isOutput=true]$IOT_CONTAINER_NAME"

            name: 'RunTerraform'
            displayName: 'Run Terraform'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              TF_VAR_imagebuild: $(tag)
              TF_VAR_DB_PASSWORD: $(DB_PASSWORD)
              TF_VAR_DB_USER: $(DB_USER)
              TF_VAR_DB_NAME: $(DB_NAME)

  - stage: Migrate
    displayName: Apply EF Core Migrations
    dependsOn: Provision
    condition: succeeded()
    variables:
      IOT_CONTAINER_NAME: $[dependencies.Provision.ProvisionJob.outputs['RunTerraform.VAR_IOT_CONTAINER_NAME']]
      REMOTE_DOCKER_HOST: $[dependencies.Provision.ProvisionJob.outputs['RunTerraform.VAR_REMOTE_DOCKER_HOST']]
      IOT_CONTAINER_NAME1: $[dependencies.Provision.RunTerraform.outputs['RunTerraform.VAR_IOT_CONTAINER_NAME']]
      REMOTE_DOCKER_HOST1: $[dependencies.Provision.RunTerraform.outputs['RunTerraform.VAR_REMOTE_DOCKER_HOST']]
      IOT_CONTAINER_NAME2: $[dependencies.ProvisionJob.RunTerraform.outputs['RunTerraform.VAR_IOT_CONTAINER_NAME']]
      REMOTE_DOCKER_HOST2: $[dependencies.ProvisionJob.RunTerraform.outputs['RunTerraform.VAR_REMOTE_DOCKER_HOST']]
      
    jobs:
    - job: Migrate
      displayName: Apply EF Core Migrations
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Creating remote Docker context..."
            docker context create myremotecontext --docker "host=tcp://$(REMOTE_DOCKER_HOST):8080"
            docker context use myremotecontext
            echo "Remote Docker Context Details:"
            docker context ls
          displayName: 'Configure Remote Docker Context'
        - script: |
            echo "Installing dotnet-ef tool..."
            dotnet tool install --global dotnet-ef
            echo "Adding .NET tools to PATH..."
            echo "::add-path::$(Agent.ToolsDirectory)/dotnet/tools"
          displayName: 'Install dotnet-ef'
        - script: |
            echo "Setting environment to Production"
            export ASPNETCORE_ENVIRONMENT=Production
            echo "Current ASPNETCORE_ENVIRONMENT: $ASPNETCORE_ENVIRONMENT"
            echo "Container Name: $(IOT_CONTAINER_NAME)"
            echo "REMOTE_DOCKER_HOST: $(REMOTE_DOCKER_HOST)"
            echo "Container Name1: $(IOT_CONTAINER_NAME1)"
            echo "REMOTE_DOCKER_HOST1: $(REMOTE_DOCKER_HOST1)"
            echo "Container Name2: $(IOT_CONTAINER_NAME2)"
            echo "REMOTE_DOCKER_HOST2: $(REMOTE_DOCKER_HOST2)"
            docker ps -a
            echo "Applying EF Core Migrations..."
            docker exec -e ASPNETCORE_ENVIRONMENT=Production $(IOT_CONTAINER_NAME) dotnet ef database update --verbose
          displayName: 'Apply EF Core Migrations'